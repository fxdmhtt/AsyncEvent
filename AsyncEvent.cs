using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace AsyncEvent
{
    /// <summary>
    /// Represents an asynchronous event that allows multiple handlers to be executed either sequentially or in parallel.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    public sealed class AsyncEvent<TEventArgs> where TEventArgs : EventArgs
    {
        /// <summary>
        /// Represents the method that will handle the asynchronous event.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object that contains the event data.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        public delegate Task AsyncEventHandler(object sender, TEventArgs e);

        /// <summary>
        /// The list of event handlers registered for this event.
        /// </summary>
        private readonly List<AsyncEventHandler> handlers = [];

        /// <summary>
        /// Adds an event handler to the event.
        /// </summary>
        /// <param name="handler">The event handler to add.</param>
        public void AddHandler(AsyncEventHandler handler) => handlers.Add(handler);

        /// <summary>
        /// Removes an event handler from the event.
        /// </summary>
        /// <param name="handler">The event handler to remove.</param>
        public void RemoveHandler(AsyncEventHandler handler) => handlers.Remove(handler);

        /// <summary>
        /// Removes all event handlers from the event.
        /// </summary>
        public void Clear() => handlers.Clear();

        /// <summary>
        /// Invokes all event handlers in parallel.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="args">An object that contains the event data.</param>
        /// <returns>A task that represents the completion of all event handlers.</returns>
        public Task InvokeParallelAsync(object sender, TEventArgs args) =>
            Task.WhenAll(handlers.Select(h => h(sender, args)));

        /// <summary>
        /// Invokes all event handlers sequentially (one after another).
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="args">An object that contains the event data.</param>
        /// <returns>A task that represents the completion of all event handlers.</returns>
        public async Task InvokeAsync(object sender, TEventArgs args)
        {
            foreach (var h in handlers)
                await h(sender, args);
        }

        /// <summary>
        /// Overloads the addition operator to add an event handler to the event.
        /// </summary>
        /// <param name="e">The event to which the handler should be added.</param>
        /// <param name="handler">The event handler to add.</param>
        /// <returns>The event with the added handler.</returns>
        public static AsyncEvent<TEventArgs> operator +(AsyncEvent<TEventArgs> e, AsyncEventHandler handler)
        {
            e.AddHandler(handler);
            return e;
        }

        /// <summary>
        /// Overloads the subtraction operator to remove an event handler from the event.
        /// </summary>
        /// <param name="e">The event from which the handler should be removed.</param>
        /// <param name="handler">The event handler to remove.</param>
        /// <returns>The event with the removed handler.</returns>
        public static AsyncEvent<TEventArgs> operator -(AsyncEvent<TEventArgs> e, AsyncEventHandler handler)
        {
            e.RemoveHandler(handler);
            return e;
        }
    }
}
